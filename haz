#!/bin/bash

export MSYS_NO_PATHCONV=1

cd `dirname $0`

chmod +x web/code/vendor/phpunit/phpunit/phpunit

# This is a workaround for a difference of opinion between Docker and WSL
real-pwd() {
  echo $(pwd) | sed -e 's@^\(/mnt\)\?/c/@c:/@'
}

if [ ! -f ".env" ]; then
    echo "Missing environment file"

    if [ -f ".env.dist" ]; then
        echo "Found .env.dist file. Type \"yes\" to create .env file."
        read env_create_confirm
        
        if [ "$env_create_confirm" == "yes" ]; then
            cp .env.dist .env
        else
            # Failed to confirm automatic .env creation
            exit 1
        fi
    else
        # Missing .env and .env.dist
        exit 1
    fi
fi

# Export the environment variables for docker-compose
set -a
source .env
set +a

PROJECT="$APP$ENV"

SUBCOMMAND=
declare -a SUBCOMMAND_ARGS

case "$(uname -s)" in
    MINGW32*|MINGW64*)
        WINPTY=1
        ;;
    *)
        WINPTY=0
        ;;
esac

init-docker-compose() {
    docker-compose -f docker-compose.yml -p $PROJECT $@
}

init-docker-compose-run() {
    docker-compose -f docker-compose.yml -p $PROJECT run --rm $@
}

init-docker-compose-down() {
    docker-compose -f docker-compose.yml -p $PROJECT kill
    docker-compose -f docker-compose.yml -p $PROJECT rm
    docker-compose -f docker-compose.yml -p $PROJECT down -v --remove-orphans $@
}

test-docker-compose() {
    docker-compose -f docker-compose-test.yml -p "${PROJECT}test" $@
}

test-docker-compose-run() {
    docker-compose -f docker-compose-test.yml -p "${PROJECT}test" run --rm $@
}

clear-container-cache() {
    init-docker-compose-run web bash /scripts/clear-container-cache.sh
}

for ARG in "$@"; do
    if [ x$SUBCOMMAND != x ]; then
        SUBCOMMAND_ARGS[${#SUBCOMMAND_ARGS[@]}]="$ARG"
    elif [ x$in_env = xtrue ]; then
        eval "export $ARG"
        in_env=false
    elif [ x$ARG = x-v ] || [ x$ARG = x--verbose ]; then
        set -x
    elif [ x$ARG = x-e ] || [ x$ARG = x--env ]; then
        in_env=true
    elif [ x$ARG = x-h ] || [ x$ARG = x--help ]; then
        SUBCOMMAND=help
    else
        SUBCOMMAND=$ARG
    fi
done

case "$SUBCOMMAND" in
    shell)
        SERVICE_NAME=
        IS_TEST=0
        for arg in "${SUBCOMMAND_ARGS[@]}"; do
          if [ "x$arg" = x--test ]; then
            IS_TEST=1
          elif [ "x$arg" = x--help ]; then
            cat <<EOF
Usage:
bash haz shell [--test] [SERVICE_NAME]
bash haz shell --help

Options:
--help          Show this message
--test          Use the test version of the service
SERVICE_NAME    The docker-compose container service name

Examples:
bash haz shell --test api    Enter the test API container
EOF
            exit
          else
            SERVICE_NAME="$arg"
          fi
        done

        if [ $IS_TEST = 1 ]; then
            PROJ="${PROJECT}test"
        else
            PROJ="${PROJECT}"
        fi

        CONTAINER_NAME="${PROJ}_${SERVICE_NAME}_1"

        if [ $WINPTY = 1 ]; then
            winpty docker exec -it $CONTAINER_NAME //bin/bash
        else
            docker exec -it $CONTAINER_NAME //bin/bash
        fi
        ;;
    composer)
        # Usage: ./haz composer update --ignore-platform-reqs
        docker run --rm --interactive --volume "$(real-pwd)/web/code":/app composer:1.8 "${SUBCOMMAND_ARGS[@]}"
        ;;  
    clean)
        # Careful when running this command. It will only remove generated
        # containers/networks but will purge ALL dangling images/volumes
        echo "> Removing containers:"
        docker rm -f $(docker ps -qa --no-trunc --filter "name=${PROJECT}") 2>/dev/null

        echo -e "\n> Removing dangling volumes:"
        docker volume rm $(docker volume ls -q --filter "dangling=true") 2>/dev/null
        
        echo -e "\n> Removing networks:"
        docker network rm $(docker network ls -q --filter "name=${PROJECT}") 2>/dev/null
        
        echo -e "\n> Removing dangling images:"
        docker rmi -f $(docker images -q --no-trunc --filter "dangling=true") 2>/dev/null
        echo -e "\n> Done cleaning"
        ;;
    setup)
        if [ ${#SUBCOMMAND_ARGS[@]} != 0 ]; then
            echo "Usage: bash haz setup"
            exit 1
        fi

        # Incase something changed, clear the DI container caches to force a rebuild
        clear-container-cache

        mkdir -p web-nginx/code
        
        init-docker-compose-down
        init-docker-compose build
        
        init-docker-compose-run mysql sh /srv/scripts/init.sh
        ;;
    start)
        init-docker-compose up -d "${SUBCOMMAND_ARGS[@]}"
        docker ps -a
        ;;
    stop)
        init-docker-compose stop "${SUBCOMMAND_ARGS[@]}"
        ;;
    reset)
        init-docker-compose stop "${SUBCOMMAND_ARGS[@]}"

        init-docker-compose-run mysql sh /srv/scripts/init.sh
        
        init-docker-compose up -d "${SUBCOMMAND_ARGS[@]}"
        ;;
    reset-test)
        test-docker-compose stop

        test-docker-compose-run mysql sh /srv/scripts/init.sh

        test-docker-compose up -d
        ;;
    test)
        reset_db=1
        no_tear_down=0
        for arg in "${SUBCOMMAND_ARGS[@]}"; do
          if [ "x$arg" = x--no-reset-db ]; then
            reset_db=0
          elif [ "x$arg" = x--no-tear-down ]; then
            no_tear_down=1
          elif [ "x$arg" = x--help ]; then
            cat <<EOF
Usage:
  bash haz test [--web] [--no-reset-db]
  bash haz test --help

Options:
  -h | --help     Show this message
  --no-reset-db   Do not reset the database
  --no-tear-down  Exit after the test suite completes and do not remove the test containers

Examples:
  bash haz test    Run the test suite
EOF
            exit 1
          fi
        done

        clear-container-cache
        mkdir -p web-nginx/code
        test-docker-compose build 2>&1 | sed -e "s/^/# /"

        if [ x$reset_db != x0 ]; then
            echo -e "\n> Rebuilding test db"
            test-docker-compose-run mysql sh //srv/scripts/init.sh 2>&1 | sed -e 's/^/# /'
        fi

        test-docker-compose up -d 2>&1 | sed -e "s/^/# /"

        echo -e "\n> Running Web Test Suite"
        test-docker-compose-run web ./vendor/phpunit/phpunit/phpunit --testdox --do-not-cache-result --testsuite Unit,Integration,Functional
        test_result=$?

        if [ $no_tear_down = "1" ]; then
            # This is used for when you want to debug the test containers
            exit $test_result
        fi

        test-docker-compose stop 2>&1 | sed -e "s/^/# /"

        # Cleanup docker related leftovers
        docker rm -f $(docker ps -a | grep "${PROJECT}test" | awk '{print $1}')
        docker network rm "${PROJECT}test"
        clear-container-cache

        exit $test_result
        ;;
    help)
        cat <<EOF
Usage:
  bash haz [command] [subcommand options]

Commands:
  help             View this message.
  setup            Build the containers.
  start            Start all the containers.
  stop             Stop all the containers.
  test             Run the test suite.
  reset            Reset the database without building the containers.
  reset-test       Reset the test database without building the containers.
  clean            Removes docker generated non-test container.
  composer         Manage an applications package dependencies.
  shell            Execute an interactive shell on an active container.

Arguments:
  -e | --env      Set a env option.
  -h | --help     Same as the help subcommand.
  -v | --verbose  Print executed commands to the CLI.
EOF
        ;;
    *)
        echo "Usage bash haz [-v|-h|-e K=V] subcommand [subcommand args]"
        exit 100
esac
exit
